{"pages":[{"title":"about","text":"","path":"about/index.html","date":"07-09","excerpt":""},{"title":"404","text":"","path":"404/index.html","date":"07-09","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"07-09","excerpt":""}],"posts":[{"title":"babyre writeup","text":"又开始口胡了 这个题是18年SUCTF的题，我当时当然一下子就看出来放弃了，毕竟那时候比现在还要菜(现在也很菜就是了)。。。 题目在这 看题题目说的是现有一个加密后的密文和加密程序，需要得到明文 这次会长抛给这道题的时候我以为是那种把加密过程逆一下的那种加密（之前做过逆加密的题），然后看那段加密看了很久，很久，很久，妈耶完全做不出来好嘛(ノ=Д=)ノ┻━┻ 然后，会长说这不是逆加密，用爆破就好了。。。 然后，好的，我这就去试试。。。 一顿分析打开ida，熟练地按下F5 虽说之前逆加密过程的想法是错的，但至少得到了点东西，比如 这么多函数连同srand在内只有operate有用。。。看了挺久才发现233333 进入operate函数就能看到我们的加密函数了，进去看看就会发现 它是单字节加密的，所以就可以爆破，四个字节以内的都能爆破。 脚本我把out里的密文按照unsigned int 的大小分开了 12345678910111213141516171819202122232425262728293031323334353637unsigned int num[]=&#123; 0xB80C91FE,0x70573EFE,0xBEED92AE,0x7F7A8193, 0x7390C17B,0x90347C6C,0xAA7A15DF,0xAA7A15DF, 0x526BA076,0x153F1A32,0x545C15AD,0x7D8AA463, 0x526BA076,0xFBCB7AA0,0x7D8AA463,0x9C513266, 0x526BA076,0x6D7DF3E1,0xAA7A15DF,0x9C513266, 0x1EDC3864,0x9323BC07,0x7D8AA463,0xFBCB7AA0, 0x153F1A32,0x526BA076,0xF5650025,0xAA7A15DF, 0x1EDC3864,0xB13AD888,0&#125;; unsigned __int64 constant = 0x1D082C23A72BE4C1;unsigned __int64 v5;unsigned int res;for(unsigned int i=0;num[i]!=0;i++)&#123; int ans; for(ans=0x20;ans&lt;0x7f;ans++) &#123; res = ans; for(unsigned int j=0;j&lt;=0x20f;++j) &#123; v5 = constant &gt;&gt; (j &amp; 0x1f); if(j &amp; 0x20) LODWORD(v5) = HIDWORD(v5); res = (res &gt;&gt; 1) ^ (((unsigned int)v5 ^ res ^ (res &gt;&gt; 16) ^ (1551120942 &gt;&gt; (((res &gt;&gt; 1) &amp; 1) + 2 * (2 * (((v9 &gt;&gt; 20) &amp; 1) + 2 * (2 * (v9 &gt;&gt; 31) + ((v9 &gt;&gt; 26) &amp; 1))) + ((v9 &gt;&gt; 9) &amp; 1))))) &lt;&lt; 31); &#125; if(res == num[i]) &#123; printf(\"%c\",ans); //跑完flag就出来了 break; &#125; &#125;&#125; 另外一个石乐志的做法我开始写脚本的时候，把ans循环里0x7F中把F看成跟L这类符号一样的符号了，本着化简的想法（然而我下面一行的0x1F却完全没有化简的想法），就把F删了。。。删了。。。删了。。。正当我看着跑出来的乱码迷得一比的时候，我发现，我可以把ASCII码表加密一遍啊！卧槽，我真机(shi)智！ 由之前的分析，进入加密函数之前有两次输入，第一次是输入任意字符串，第二次输入一个数seed，必须满足9&lt;n&lt;=32。然后每次只能加密30个字符。 然后就开始了快(you)乐(du)的加密，把ASCII码表从0x21开始到0x7F的可打印字符加密出来，然后一个个和密文比对，也能得出flag。 123456for(int i=0;num[i]!=0;i++) &#123; for(int j=0;j&lt;95;j++) //num储存ASCII可打印字符加密结果 if(num[i] == ans[j]) //ans储存密文 printf(\"%c\",j+33); //ASCII可打印字符（不算空格，空格是0x20)从0x21（33）开始， &#125; 总结这个题，貌似是签到题，所以并不是很复杂，我找对方向以后也就用了一个晚上的时间(当然，没找对方向的时候用了几天。。。也没做出来) 果然，reverse的题花样还是很多的，而且一道题说不定有比较简单的方式，比如这道题可以啥也不管直接加密ASCII码表然后对比2333333，当然这是事后才知道哈哈哈","path":"2018/07/09/babyre/","date":"07-09","excerpt":""},{"title":"Reverse writeup","text":"本辣鸡要开始口胡了 前几天会长发了道练习题，本萌新尝试着做了一下，然后 第一次完全自己做出题真tm开心 题目在这 随便看看在Ubuntu里file得知是64位的文件 运行下试试 看起来就是要找到密码 废话！ 一顿分析用IDA打开 发现 密码长度为32个字符串 每4位组合成一个int类型的值 判断总共是8个方程 前四个int类型的数异或以后当成rand的种子 工具 python的z3-solver库，linux下的 脚本 前四位（a,b,c,d) 12345678910#!/usr/bin/env pythonfrom z3 import *a = Int('a')b = Int('b')c = Int('c')d = Int('d')solve(b*a-c*d == 0x24CDF2E7C953DA56, 3*c+4*d-b-2*a == 0x17B85F06, 3*a*d-c*b == 0x2E6E497E6415CF3E, 27*b+a-11*d-c == 0x95AE13337) ​ 解出来就得到密码前16位 后四位（e,f,g,h） 按照只要种子一样，得到的随机数数列也是相同的，所以很容易得到它的那些参数，但是这里我踩了个坑 这里随机数要用gdb单步出来 我开始没在Ubuntu里，在Windows下用C语言写的，然后得到的参数根本解不出来。。。 只要把前十六位解出来转换成字符串，再加上16位任意字符，凑成32位的密码，关注得到随机参数时eax的值，记录下来就是了，顺便还能检查一下前十六位有没有解错（解错会有跳转 至于为什么，其实我也不知道大概是因为系统不同吧 12345678910#!/usr/bin/env pythonfrom z3 import *e = Int('e')f = Int('f')g = Int('g')h = Int('h')solve(h*0x27+e*0x16-f-g == 0xE638C96D3, h+e+g*0x2d-f*0x2d == 0xB59F2D0CB, e*0x23+f*0x29-g-h == 0xDCFE88C6D, g*0x24+e-f-h*0xd == 0xC076D98BB) ​ 同样，跑出来就是密码后16位 密码 将32位都跑出来以后，直接转换成字符串，就能得到密码 12345int i;int sum[32]=&#123;0x61,0x6D,0x70,0x6F,0x5A,0x32,0x5A,0x6B,0x4E,0x6E,0x6B,0x31,0x4E,0x48,0x6C,0x33, 0x4E,0x54,0x63,0x30,0x4E,0x54,0x63,0x31,0x5A,0x33,0x4E,0x6F,0x61,0x47,0x46,0x47&#125;;for(i=0;i&lt;32;i++) printf(\"%c\",sum[i]); 结果然后就是激动人心的得到falg的过程了 看来没错了 总结​ 这个题讲真，虽然是很简单的那种题毕竟连我都会，但是那种激动的感觉真的没法用言语说明，就像发现新大陆的感觉，也可能是那种学了这么久能独立写出题的快乐吧","path":"2018/07/09/Reverse/","date":"07-09","excerpt":""},{"title":"Hello World","text":"ctf萌新报道！ 开这个blog是为了记录我写不出来和没过的题，顺便写点总结啥的 十分感谢 codgician 大佬的无私帮助，才能顺利搭好这个blog~ %%%%%%% 就跟每个语言的初学者的第一份代码一样 Hello World！Hello world~","path":"2018/07/08/hello-world/","date":"07-08","excerpt":""}]}